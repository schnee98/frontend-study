---
description:  "PR 만들어줘", "draft PR 생성해줘", "GitHub PR 생성", "pull request 만들어줘" 등의 키워드 사용 시 자동으로 현재 브랜치 상태를 확인하고, 커밋 메시지와 변경사항을 분석하여 적절한 제목과 설명이 포함된 PR을 생성합니다
alwaysApply: false
---

## 1단계: 현재 상태 확인 및 분석

### 브랜치 상태 확인

**필수 확인 사항**:

1. **현재 브랜치명 확인**

   ```bash
   git branch --show-current
   ```

2. **브랜치의 커밋 히스토리 분석**

   ```bash
   git log --oneline origin/main..HEAD
   ```

3. **변경된 파일 목록 확인**

   ```bash
   git diff --name-only origin/main..HEAD
   ```

4. **Staged/Unstaged 변경사항 확인**
   ```bash
   git status --porcelain
   ```

### 스터디 주차 및 주제 추출

**브랜치명 패턴 분석**:

- `feature/week1-javascript-variables` → 주차: `Week 1`, 주제: `JavaScript - 변수와 상수, 데이터 타입`
- `feature/week10-react-class-vs-function` → 주차: `Week 10`, 주제: `React - 클래스 컴포넌트와 함수 컴포넌트, 렌더링`
- `feature/week26-typescript-intro` → 주차: `Week 26`, 주제: `TypeScript - 타입스크립트 알아보기`

**폴더 구조 분석**:

```bash
# 변경된 파일의 경로 패턴 분석
git diff --name-only upstream/main..HEAD | grep -E "(javascript|react|typescript|nextjs|react-query|react-deep-dive|algorithm|lodash)/week[0-9]+"
```

**추출 규칙**:

- 폴더명에서 주제 추출: `javascript`, `react`, `typescript`, `nextjs`, `react-query`, `react-deep-dive`, `algorithm`, `lodash`
- 주차명에서 숫자 추출: `week[0-9]+`
- README.md의 주차별 주제 테이블과 매칭하여 상세 주제 파악

### 커밋 메시지 분석

**분석 목적**:

- PR 타입 자동 판단을 위한 키워드 추출
- Summary 섹션 작성을 위한 변경사항 파악
- 작업 의도 및 배경 이해

**분석 대상**:

```bash
# 최근 커밋들의 메시지 수집
git log --pretty=format:"%s" upstream/main..HEAD
```

**키워드 매핑** (프론트엔드 스터디 기준):

- `feat`, `feature`, `add`, `implement` → **feat** 타입
- `fix`, `bug`, `hotfix`, `patch` → **fix** 타입
- `refactor`, `clean`, `improve` → **refactor** 타입
- `docs`, `documentation`, `readme`, `question`, `solution` → **docs** 타입 (스터디 특성상 주로 사용)
- `test`, `spec`, `e2e` → **test** 타입
- `chore`, `config`, `setup` → **chore** 타입

### 변경사항 분석

**파일 변경 패턴 분석**:

```bash
# 변경된 파일의 통계
git diff --stat origin/main..HEAD
```

**스터디 특성 분석 기준**:

1. **새로운 스터디 내용 (feat)**:

   - 새로운 주차 폴더 생성
   - 새로운 문제/답변 파일 추가
   - 새로운 알고리즘 문제 해결

2. **문서 수정 (docs)**:

   - 기존 문제/답변 파일 수정
   - README 업데이트
   - 스터디 자료 정리

3. **리팩토링 (refactor)**:

   - 코드 구조 개선
   - 파일 정리 및 재구성
   - 중복 코드 제거

4. **설정 변경 (chore)**:
   - `package.json`, `tsconfig.json` 등 설정 파일
   - `.github/` 관련 파일
   - 환경 설정 파일들

### 사전 검증

**PR 생성 가능 여부 확인**:

1. **커밋 존재 여부**:

   ```bash
   git rev-list --count origin/main..HEAD
   ```

   - 0개인 경우: "커밋이 없습니다. 변경사항을 커밋 후 다시 시도해주세요."

2. **원격 브랜치 동기화**:

   ```bash
   git fetch origin
   git fetch upstream
   ```

3. **기존 PR 존재 여부**:
   ```bash
   gh pr list --head $(git branch --show-current)
   ```
   - 기존 PR이 있는 경우: 사용자에게 알림 및 확인 요청

### 정보 수집 완료

**수집된 정보 정리**:

- ✅ 현재 브랜치명: `feature/week1-javascript-variables`
- ✅ 주차: `Week 1`
- ✅ 주제: `JavaScript - 변수와 상수, 데이터 타입`
- ✅ 커밋 수: 3개
- ✅ 주요 변경사항: JavaScript 1주차 문제 및 답변 추가
- ✅ 예상 타입: `docs` (문서 내용 변경)

**다음 단계 진행**:

- 수집된 정보를 바탕으로 2단계 (제목 생성 및 타입 판단)으로 진행

---

## 2단계: 제목 생성 및 타입 판단

### 제목 형식

**필수 형식**: `[Week {주차}] {type}: {주제} - {세부내용}`

**작성 규칙**:

- 주차는 대괄호 `[]` 안에 `Week {주차}` 형태로 명시
- 타입 뒤에 콜론(`:`)과 공백 한 칸
- 주제는 간단명료하게 (예: JavaScript, React, TypeScript 등)
- 세부내용은 핵심 키워드 1-2개만 포함
- 전체 60자 이하 권장 (한글 기준)

**예시**:
- `[Week 1] docs: JavaScript - 변수와 상수, 데이터 타입`
- `[Week 10] docs: React - 클래스 vs 함수 컴포넌트, 렌더링`
- `[Week 26] docs: TypeScript - 타입스크립트 소개`

### 타입 자동 판단 로직

**커밋 메시지 및 변경사항 분석 기준**:

1. **docs**: 문서 내용 변경 (스터디 특성상 주로 사용)

   - 문제/답변 파일 추가/수정
   - README, 가이드, API 문서 작성/수정
   - 스터디 자료 정리

2. **feat**: 새로운 기능, 기능 개선

   - 새로운 주차 폴더 생성
   - 새로운 알고리즘 문제 해결
   - 새로운 컴포넌트/페이지 파일 추가

3. **fix**: 버그 수정, 핫픽스

   - 오류 해결 및 버그 수정
   - 기존 문제/답변의 오류 수정

4. **refactor**: 코드 리팩토링, 포맷팅

   - 기능 변경 없는 코드 품질 개선
   - 파일 구조 정리 및 재구성

5. **test**: 테스트 코드 추가/수정

   - 단위/통합 테스트, 모킹 코드 작성
   - 알고리즘 문제 테스트 케이스

6. **chore**: 빌드, 패키지 매니저 설정 등

   - package.json, workflow, eslint 등 설정 변경
   - 의존성 업데이트, 환경 설정

### 사용자 확인 프로세스

- 자동 판단된 타입을 사용자에게 제안
- 수정 필요시 사용자가 다른 타입 선택 가능
- 불분명한 경우 사용자에게 선택 요청

---

## 3단계: 템플릿 기반 본문 작성

### 템플릿 파일 처리

**템플릿 선택 우선순위**:

1. 기본 템플릿: `.github/pull_request_template.md` (기본값)
2. 사용자 지정 템플릿: `.github/PULL_REQUEST_TEMPLATE/[선택한파일].md` (사용자가 별도 요청 시)

**필수 작업**:

- 선택된 템플릿 파일을 반드시 읽어와서 구조 파악
- 읽어온 템플릿 구조에 맞게 섹션별 자동 작성

### Summary 섹션 작성

**형식**: 요구사항/구현 또는 목적/수단 구조

**요구사항 작성**:

- 왜 이 스터디 내용이 필요한가?
- 어떤 주제를 학습하는가?
- 스터디 참여자에게 어떤 가치를 제공하는가?

**구현 작성**:

- 구체적으로 무엇을 준비했는가?
- 어떤 방식으로 문제와 답변을 구성했는가?
- 주요 변경사항은 무엇인가?

### Optional 섹션들 (사용자 요청 시에만 작성)

**⚠️ 중요**: 다음 섹션들은 기본적으로 포함되지 않으며, 사용자가 프롬프트에서 명시적으로 요청한
경우에만 작성

**공통 작성 방식**:

- 사용자와 LLM이 **프롬프트를 통한 인터렉션**으로 해당 섹션 내용을 결정
- LLM이 사용자에게 **구체적인 질문을 제시**하여 필요한 정보 수집
- 사용자의 **답변을 바탕으로 섹션 내용을 작성**
- 추가 정보가 필요한 경우 **추가 질문을 통해 상세화**

#### Review Points 섹션

**작성 조건**: 사용자가 "리뷰 포인트 추가해줘" 등으로 요청한 경우

**질문 예시**:

- "어떤 부분에 대해 리뷰어의 의견을 특별히 받고 싶으신가요?"
- "문제 작성 중에 고민이 되었던 부분이 있나요?"
- "답변 내용에서 검토가 필요한 부분이 있나요?"

**작성 내용**:

- 주요하게 리뷰가 필요한 부분을 별도로 포인트
- 리뷰어에게 이 내용을 작성하며 고민했던 부분을 설명

#### Backlog 섹션

**작성 조건**: 사용자가 "백로그 섹션 포함해줘" 등으로 요청한 경우

**질문 예시**:

- "이번 스터디에서 TODO로 남겨둔 부분이 있나요?"
- "완벽히 이해되지 않았지만 일단 정리한 HACK 부분이 있나요?"
- "추후 개선이나 추가 학습이 필요한 부분이 있나요?"

**작성 내용**:

- TODO: 맥락분리를 위해 TODO로 남기는 부분
- HACK: 완벽히 이해되지 않았지만 요구사항을 달성하기 위해 만든 부분

#### LLM Context 섹션

**작성 조건**: 사용자가 "LLM Context도 작성해줘" 등으로 요청한 경우

**⚠️ 자동 생성 금지**: PR 생성용 LLM과 실제 작업 수행 LLM의 컨텍스트가 혼동되어 부정확한 결과가
나오기 때문

**질문 예시**:

- "이번 작업에서 LLM을 활용한 부분이 있나요?"
- "어떤 상황에서 LLM의 도움을 받았나요?"
- "LLM에게 어떤 프롬프트로 요청했나요?"
- "LLM에게 제공한 컨텍스트나 사용한 Cursor 룰이 있나요?"

**작성 내용**:

- 어떤 상황에서 LLM의 도움을 받았는지
- 어떤 문제를 해결하기 위해 요청했는지
- 어떤 프롬프트로 지시했는지
- 어떤 컨텍스트를 제공했는지
- 사용한 Cursor 룰이 있다면 명시


**LLM 역할**:


### PR 생성

**명령어**:

```bash
gh pr create --title "[Week {주차}] {type}: {주제} - {세부내용}" --body-file [템플릿파일] --base upstream/main
```

**PR 생성 방식**:

- **일반 PR**: 기본적으로 일반 PR로 생성 (draft 아님)
- **Draft PR**: 사용자가 "draft PR" 또는 "초안 PR" 요청 시에만 `--draft` 플래그 추가

**Base 브랜치 지정**:

- `--base upstream/main`: upstream의 main 브랜치를 base로 지정
- origin에서 upstream으로 PR을 보내기 위함

**Fork 선택 처리**:

- PR 생성 시 "Where should we push the 'main' branch?" 질문이 나오면
- **반드시 "Create a fork of schnee98/frontend-study" 선택**
- 이는 개인 저장소에서 upstream으로 PR을 보내기 위한 필수 과정

### PR 브라우저에서 열기

**PR 생성 완료 후 자동 실행**:

```bash
gh pr view --web
```

**실행 조건**:

- PR 생성이 성공적으로 완료된 경우
- 기본 브라우저에서 PR 페이지 자동 열림

**사용자 알림**:

- "✅ PR이 브라우저에서 열렸습니다!" 메시지 표시
- PR 링크도 함께 표시하여 사용자 확인 가능

---

## 4단계: 개인 저장소 동기화

### 개인 저장소에 푸시

**PR 생성 후 필수 작업**:

```bash
# 개인 저장소(origin)에 현재 브랜치 푸시
git push origin $(git branch --show-current)

# 또는 강제 푸시 (필요한 경우)
git push origin $(git branch --show-current) --force-with-lease
```

**동기화 이유**:

- origin에서 upstream으로 PR을 보낸 후 개인 저장소에도 동일한 내용 보존
- 다른 기기에서 작업 시 개인 저장소에서 브랜치 확인 가능
- PR이 merge된 후 개인 저장소 정리 시 참고 자료로 활용

### 동기화 확인

**푸시 완료 후 확인**:

```bash
# 개인 저장소의 브랜치 상태 확인
git ls-remote origin $(git branch --show-current)

# 로컬과 원격 브랜치 비교
git log --oneline origin/$(git branch --show-current)..HEAD
```

---

## 예외 상황 처리

### 정보 부족 시 대응

- **브랜치명 불명확**: 사용자에게 확인 요청
- **커밋 히스토리 없음**: 사용자에게 변경사항 설명 요청
- **주차/주제 추출 실패**: 폴더 구조 분석으로 대체
- **템플릿 파일 없음**: 기본 템플릿 사용

### LLM 작업 제한사항

- **추측 금지**: 근거 없는 내용 작성 금지
- **이미지 처리 금지**: 실제 이미지 추가하지 않음
- **Optional 섹션들은 인터렉션 기반**: Review Points, Backlog, LLM Context는 사용자가 요청한
  경우에만 프롬프트 인터렉션을 통해 작성

---

## 사용자 요청 트리거

다음 키워드 사용시 자동 적용:

- "PR 만들어줘"
- "upstream으로 PR 작성해줘"
- "스터디 PR 생성해줘"
- "GitHub PR 생성"
- "pull request 만들어줘"
- 기타 PR 생성 관련 요청

---

## 체크리스트

- [ ] 브랜치명 확인 및 주차/주제 추출
- [ ] **Base 브랜치 처리**: origin/main을 base로 지정
- [ ] 템플릿 파일 읽기 및 구조 파악
- [ ] 타입 자동 판단 및 사용자 확인
- [ ] 템플릿 구조에 맞는 섹션별 본문 작성
- [ ] Optional 섹션들 (Review Points, Backlog, LLM Context) 사용자 요청 시 인터렉션으로 작성
- [ ] PR 생성 (origin에서 upstream/main으로 PR 생성) 및 링크 제공
- [ ] PR을 브라우저에서 자동으로 열기
- [ ] **개인 저장소 동기화**: origin/main에 동일한 브랜치 푸시
- [ ] **🧹 임시 파일 정리 (필수)**: pr_body.md 등 생성된 임시 파일 삭제

- [ ] PR을 브라우저에서 자동으로 열기
- [ ] **🧹 임시 파일 정리 (필수)**: pr_body.md 등 생성된 임시 파일 삭제
